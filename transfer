#!/bin/bash
# Eric Balawejder program 1

#set -x
#set -eu			# -e exits whenever anything returns a non-zero value
					# -u makes it an error to reference a non-existent 
					# environment variable 
#set -o pipefail	# raises error for misspelled commands

# rsync usage 
display_usage() {
  echo "usage: transfer [options] config-file.xml"
  echo "options:"
  echo "-d or -u: download or upload, resp. one and only one must be present"
  echo "-f:       force transfer regardless of later timestamp on target file"
  echo "-x:       delete items in target not present in source"
  echo "-t:       (testing) show the contents of the exclusion rules file,"
  echo "          the full rsync command and terminate without doing anything"
}

# if there are no arguments, display usage and exit
if [ $# -eq 0 ]
then
  echo ""
  display_usage
  echo ""
  exit 1
fi

# a file to hold the output of commands 
output_file=/tmp/OUTPUT_$$
#output_file="OUTPUT"

# a file to hold the filtered dry run output
dry_run_output=/tmp/dry_run_output_$$
#dry_run_output="dry_run_output"

# a file to hold the edited rules
rules_file=/tmp/RULES_$$
#rules_file="RULES"

# reset OPTIND in case getopts has been used previously in the shell.
OPTIND=1

# argument flag values
download=0
upload=0
force=0
delete=0
testing=0

# argument cases
while getopts ":dufxt" opt; do
  case "$opt" in
    d)
      download=1
      ;;
    u)
      upload=1
      ;;
    f)
      force=1
      ;;
    x)
      delete=1
      ;;
    t)
      testing=1
      ;;
    *)
      echo ""
      echo "unknown argument: -$OPTARG" >&2
      echo ""
      display_usage
      exit 1
      ;;
  esac
done

# shift out all arguments up to first non-option argument
shift $((OPTIND-1))

# if config file is not present after arguments, show usage and exit 1
config_file="${1:-}"
if [[ -z "$config_file" ]]
then
  echo ""
  echo "ERROR: config file required"
  echo ""
  display_usage
  exit 1
fi

# if config file is not a regular file, show usage and exit 1
if [ ! -f $config_file ]
then
  echo ""
  echo "ERROR: $config_file does not exist"
  echo ""
  display_usage
  exit 1
fi

# if -d and -u are both present, show message and exit 1
if [[ $download -eq 1 ]]
then
  if [[ $upload -eq 1 ]]
  then
    echo ""
    echo "download and upload options are mutually exclusive." 
	echo "Please choose one or the other"
    echo ""
    display_usage
    exit 1
  fi
fi

# define src, dst and rules from the config xml file tags
src="$(xmlpathval.py "$config_file" '/sync/@src')"
dst="$(xmlpathval.py "$config_file" '/sync/@dst')"
rules="$(xmlpathval.py "$config_file" '/sync/rules[1]/text()')"

# if src is the empty string, show message and exit 1
if [ -z $src ]
then
  echo ""
  echo "ERROR: src is empty"
  echo ""
  exit 1
fi

# if dst is the empty string, show message and exit 1
if [ -z $dst ]
then
  echo ""
  echo "ERROR: dst is empty"
  echo ""
  exit 1
fi

# -a rsync option is always present
#rsync_command="rsync -a"
rsync_command="`which rsync` -a"

# intialize has_rules to 0 and then check for rules
has_rules=0

# parse the rules, extract only the first character. ${parameter:offset:length}
# this does not create "normalized" form. I could not get the correct string 
# matching pattern or regular expression to work properly
while read line; do
  first_char=${line:0:1}
  if [[ "$first_char" == "+" ]]
  then
    has_rules=1
    echo "$line" >> $rules_file
  fi

  if [[ "$first_char" == "-" ]]
  then
    has_rules=1
    echo "$line" >> $rules_file
  fi
done < <(echo "$rules")

# if there is a rules element, display "--exclude-from"
rsync_options=""
if [[ $has_rules -eq 1 ]]
then
  rsync_options="$rsync_options --exclude-from=$rules_file"
fi

# if -f (force) is not present, -u is the other rsynce option
if [[ $force -eq 0 ]]
then
  rsync_options="$rsync_options -u"
fi

# if -x (delete) is present, then "--delete" is an rsync option
if [[ $delete -eq 1 ]]
then
  rsync_options="$rsync_options --delete"
fi

# if -u (upload) is present, the dst value is the target
srcdst=""
if [[ $upload -eq 1 ]]
then
  srcdst="$src $dst"
fi

# if -d (download) is present, the dst value is the target
if [[ $download -eq 1 ]]
then
  srcdst="$dst $src"
fi

# cleanup function
cleanup() {
	rm -f $output_file
	rm -f $rules_file
	rm -f $dry_run_output
	exit
}

# add -nv flags to rsync command for dry run
dry_run_options="$rsync_options -nv"

# if -t (testing) is present, do nothing. dump the rsync command and dump the rules file
if [[ $testing -eq 1 ]]
then
  echo "$rsync_command $dry_run_options $srcdst"
  cat $rules_file
  # delete temp files
  cleanup
  exit 0
fi

# show rsync dry run command
echo "$rsync_command $dry_run_options $srcdst"

# place rsync output in temporary OUTPUT file
$rsync_command $dry_run_options $srcdst > $output_file

# remove the first line and the last three lines from the OUTPUT file
# send remaining lines to dry_run_output file
sed '$d' $output_file | sed '$d' | sed '$d' | sed '1d' > $dry_run_output

# show files to be transfered
cat $dry_run_output

# if file is of size zero: there are no files to be transfered, exit 0
if [ ! -s $dry_run_output ]
then
	echo "There is nothing to do."
	# delete temp files
	cleanup
	exit 0
fi

# prompt the user after the dry run, default action exit 0
echo "Complete transfer actions? y/N"
read x
if [ "$x" = "y" ] || [ "$x" = "Y" ]
then
	# execute rsync command minus the dry run -nv flags to do the transfer
	$rsync_command $rsync_options $srcdst
	# show the rsync command minus the dry run -nv flags
	echo "$rsync_command $rsync_options $srcdst" 
	echo "Transfer complete"
	# delete temp files
	cleanup
	exit 0
fi

# when SIGINT is revieved (Ctrl-C in shell), call cleanup
trap "cleanup" INT

# cleanup temp files on any action not "y"
cleanup
exit 0